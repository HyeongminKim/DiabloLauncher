# pylint: disable=W0613

from enum import Enum

userApp: str | None
userLocalApp: str | None
logLevel: str | None

class color(Enum):
    RESET: str
    RED: str
    GREEN: str
    YELLOW: str
    BLUE: str
    MAGENTA: str
    GRAY: str

class errorLevel(Enum):
    INFO: bytes
    WARN: bytes
    ERR: bytes
    FATL: bytes

def check_terminal_output(command: str) -> (None | str): ...
def logformat(level: errorLevel, text: str) -> None: ...

diabloExecuted: bool
updateChecked: bool
forceReboot: bool

rebootWaitTime: bytes
loadWaitTime: bytes
ignoreTime: bytes

gameStartTime: None | float
gameEndTime: None | float

envData: None | str
diablo2Path: None | str
diablo3Path: None | str

definedMod: None | str
resolutionProgram: bool

originX: None | str
originY: None | str
originFR: None | str
alteredX: None | str
alteredY: None | str
alteredFR: None | str

def ShowWindow() -> None: ...
def HideWindow() -> None: ...
def AlertWindow() -> None: ...

def CheckResProgram() -> None: ...
def UpdateProgram() -> None: ...

def ExitProgram() -> None: ...
def InterruptProgram(sig, frame) -> None: ...

def FormatTime(milliseconds: float, rawType: bool) -> (tuple[int, int, int] | str): ...
def SaveGameRunningTime(playTime: float) -> None: ...
def LoadGameRunningTime(playTime: float) -> (tuple[int, float | int, float, float] | tuple[int, float | int, int, int] | tuple[int, int, int, int]): ...
def ClearGameRunningTime() -> None: ...

def GameLauncher(gameName: str, supportedX: int, supportedY: int, os_min: int) -> None: ...
def LaunchGameAgent() -> None: ...

def BootAgent(poweroff: str) -> None: ...
def EmgergencyReboot() -> None: ...

def GetModDetails() -> None: ...
def DownloadModsLink() -> None: ...
def SearchModInGitHub() -> None: ...
def ModsPreferSelector() -> None: ...

def FindGameInstalled() -> None: ...
def GetResolutionValue() -> None: ...
def SetResolutionValue() -> None: ...

def RequirementCheck() -> None: ...

def ReturnRegistryQuery(regAddress: str, queryName: str) -> (any | None): ...
def OpenProgramUsingRegistry(regAddress: str, queryName: str) -> None: ...
def TestRegistryValue(regAddress: str, queryName: str) -> bool: ...

def UpdateStatusValue() -> None: ...
def ReloadStatusBar() -> None: ...

def init() -> None: ...
